package o;

import android.os.Process;
import android.os.SystemClock;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewConfiguration;
import com.dreampay.vsc.core.models.IDexguardStrings;
import java.security.PublicKey;
/* loaded from: classes6.dex */
public final class printAttributes implements IDexguardStrings {
    private static int HaptikSDK$b = 0;
    private static char HaptikSDK$c = 0;
    private static long ag$a = 0;
    public static final String ah$a;
    private static int ah$b = 1;
    private static int invoke;
    public static final printAttributes toString;
    public static final String valueOf;
    public static final String values;

    static void ag$a() {
        HaptikSDK$b = 0;
        ag$a = 0L;
        HaptikSDK$c = (char) 45337;
    }

    static {
        ag$a();
        valueOf = toString((Process.getThreadPriority(0) + 20) >> 6, new char[]{51724, 56781, 25583, 59760}, new char[]{0, 0, 0, 0}, (char) View.MeasureSpec.makeMeasureSpec(0, 0), new char[]{24521, 41078, 9039, 65169, 28044, 1700, 37756, 10551, 43330, 25953, 20776, 55513, 29649, 1838, 12341, 57422, 24419, 26576, 10458, 40101, 42609, 33457, 11665, 30990, 4431, 3261, 22365, 30484, 39346, 25756, 13341, 11694, 48539, 24866}).intern();
        ah$a = toString((-1) - MotionEvent.axisFromString(""), new char[]{63285, 12507, 57146, 36998}, new char[]{0, 0, 0, 0}, (char) ((ViewConfiguration.getLongPressTimeout() >> 16) + 34527), new char[]{18558, 58517, 49069, 23503, 59545, 42756, 32350, 39515, 11342, 38012, 2350, 14021, 23778, 6412, 59164, 23217, 7710, 29126, 33811, 63965, 33905, 48628, 60260, 57924, 7296, 6652, 50628, 16126, 15614, 32048, 15614, 26405, 3854, 59053, 56815, 51475, 22210, 27002, 22715, 57187, 50756, 2476, 10977, 56734, 51104, 12036, 58076, 25687, 43813, 45342, 12107, 42362, 26827, 23929, 10624, 36592, 21035, 54866, 7992, 24697, 654, 2294, 2817, 42284, 18902, 25148, 57293, 65168, 7227, 11649, 45509, 61558, 25381, 6620, 35415, 25961, 50261, 20388, 57540, 51063, 11827, 21481, 38446, 60578, 54723, 29338, 31218, 12276, 58215, 23314, 6933, 14595, 51748, 32936, 11071, 47915, 37250, 53348, 38941, 57219, 28732, 15346, 29112, 34302, 21240, 42637, 43586, 26664, 13289, 38766, 13663, 64946, 47142, 33174, 33050, 24184, 1384, 40959, 20762, 36051, 51096, 45929, 10865, 17474, 34497, 3070, 9332, 20018, 60853, 2877, 51988, 20611, 18488, 15279, 1910, 52960, 10756, 61906, 43602, 58254, 40503, 8744, 43226, 61334, 40480, 4503, 17460, 17710, 44024, 38203, 41087, 30881, 18417, 28926, 43875, 59780, 51120, 56592, 1804, 48258, 35111, 17380, 45816, 46434, 10890, 22690, 6681, 27826, 27165, 38940, 15522, 16718, 23411, 18440, 5284, 52721, 31360, 49314, 20803, 55499, 35800, 52980, 32609, 44791, 12436, 2606, 10091, 65066, 65040, 34871, 52950, 23862, 15109, 51208, 22341, 20023, 53048, 28686, 26872, 9153, 42515, 37699, 47877, 21934, 39630, 47492, 28178, 43773, 1914, 20512, 39359, 34396, 47753, 13288, 1575, 62159, 59045, 8356, 7757, 24126, 19567, 24912, 13374, 55693, 1297, 788, 7583, 54791, 3181, 17018, 61435, 29780, 33219, 10094, 59876, 29357, 27790, 23444, 22294, 24881, 18118, 24099, 39144, 48473, 37761, 55649, 4618, 53695, 27870, 19828, 50584, 52037, 56172, 26647, 58221, 33144, 33257, 58348, 43793, 61447, 12034, 18631, 45177, 17092, 59551, 10371, 21638, 11310, 35737, 35790, 53738, 9232, 23832, 55742, 29476, 13755, 42319, 20919, 13794, 52616, 58778, 20956, 32241, 58455, 3642, 16133, 18430, 22383, 44148, 7621, 32149, 25576, 16207, 17894, 8557, 56676, 8797, 55574, 14402, 26939, 48248, 30797, 53923, 34007, 47175, 63896, 15035, 24212, 15718, 18416, 63622, 178, 30136, 53223, 37769, 9623, 58876, 11800, 19134, 345, 19561, 18321, 3307, 47714, 44322, 59883, 32201, 17260, 54034, 19529, 25114, 27861, 47396, 25954, 5482, 63845, 24363, 30255, 51891, 35441, 43245, 45619, 55717, 31096, 19070, 61766, 25869, 7104, 52004, 18859, 41825, 61619, 35743, 2734, 35012, 38818, 32136, 49912, 26735, 51353, 1532, 56571, 5290, 50757, 48599, 64561, 39635, 61025, 24715, 9950, 34846, 19677, 60660, 32590, 63473, 18811, 44678, 19428, 56545, 51158, 13031, 59895, 48492, 30050, 43866, 55625, 29743, 50755, 3940, 60818, 39619, 10369}).intern();
        values = toString((ViewConfiguration.getScrollBarFadeDuration() >> 16) - 810658181, new char[]{31633, 44630, 20175, 35173}, new char[]{0, 0, 0, 0}, (char) ((SystemClock.currentThreadTimeMillis() > (-1L) ? 1 : (SystemClock.currentThreadTimeMillis() == (-1L) ? 0 : -1)) + 25933), new char[]{28445, 16287, 58123}).intern();
        toString = new printAttributes();
        int i = ah$b + 37;
        invoke = i % 128;
        int i2 = i % 2;
    }

    private printAttributes() {
    }

    public final PublicKey valueOf() {
        int i = invoke + 35;
        ah$b = i % 128;
        PublicKey values2 = getStandaloneAttributes.values(((i % 2 == 0 ? '$' : 'Y') != 'Y' ? toString(ViewConfiguration.getMaximumDrawingCacheSize() >>> 58, new char[]{63285, 12507, 57146, 36998}, new char[]{0, 0, 0, 0}, (char) (34527 << (Process.myPid() >>> 94)), new char[]{18558, 58517, 49069, 23503, 59545, 42756, 32350, 39515, 11342, 38012, 2350, 14021, 23778, 6412, 59164, 23217, 7710, 29126, 33811, 63965, 33905, 48628, 60260, 57924, 7296, 6652, 50628, 16126, 15614, 32048, 15614, 26405, 3854, 59053, 56815, 51475, 22210, 27002, 22715, 57187, 50756, 2476, 10977, 56734, 51104, 12036, 58076, 25687, 43813, 45342, 12107, 42362, 26827, 23929, 10624, 36592, 21035, 54866, 7992, 24697, 654, 2294, 2817, 42284, 18902, 25148, 57293, 65168, 7227, 11649, 45509, 61558, 25381, 6620, 35415, 25961, 50261, 20388, 57540, 51063, 11827, 21481, 38446, 60578, 54723, 29338, 31218, 12276, 58215, 23314, 6933, 14595, 51748, 32936, 11071, 47915, 37250, 53348, 38941, 57219, 28732, 15346, 29112, 34302, 21240, 42637, 43586, 26664, 13289, 38766, 13663, 64946, 47142, 33174, 33050, 24184, 1384, 40959, 20762, 36051, 51096, 45929, 10865, 17474, 34497, 3070, 9332, 20018, 60853, 2877, 51988, 20611, 18488, 15279, 1910, 52960, 10756, 61906, 43602, 58254, 40503, 8744, 43226, 61334, 40480, 4503, 17460, 17710, 44024, 38203, 41087, 30881, 18417, 28926, 43875, 59780, 51120, 56592, 1804, 48258, 35111, 17380, 45816, 46434, 10890, 22690, 6681, 27826, 27165, 38940, 15522, 16718, 23411, 18440, 5284, 52721, 31360, 49314, 20803, 55499, 35800, 52980, 32609, 44791, 12436, 2606, 10091, 65066, 65040, 34871, 52950, 23862, 15109, 51208, 22341, 20023, 53048, 28686, 26872, 9153, 42515, 37699, 47877, 21934, 39630, 47492, 28178, 43773, 1914, 20512, 39359, 34396, 47753, 13288, 1575, 62159, 59045, 8356, 7757, 24126, 19567, 24912, 13374, 55693, 1297, 788, 7583, 54791, 3181, 17018, 61435, 29780, 33219, 10094, 59876, 29357, 27790, 23444, 22294, 24881, 18118, 24099, 39144, 48473, 37761, 55649, 4618, 53695, 27870, 19828, 50584, 52037, 56172, 26647, 58221, 33144, 33257, 58348, 43793, 61447, 12034, 18631, 45177, 17092, 59551, 10371, 21638, 11310, 35737, 35790, 53738, 9232, 23832, 55742, 29476, 13755, 42319, 20919, 13794, 52616, 58778, 20956, 32241, 58455, 3642, 16133, 18430, 22383, 44148, 7621, 32149, 25576, 16207, 17894, 8557, 56676, 8797, 55574, 14402, 26939, 48248, 30797, 53923, 34007, 47175, 63896, 15035, 24212, 15718, 18416, 63622, 178, 30136, 53223, 37769, 9623, 58876, 11800, 19134, 345, 19561, 18321, 3307, 47714, 44322, 59883, 32201, 17260, 54034, 19529, 25114, 27861, 47396, 25954, 5482, 63845, 24363, 30255, 51891, 35441, 43245, 45619, 55717, 31096, 19070, 61766, 25869, 7104, 52004, 18859, 41825, 61619, 35743, 2734, 35012, 38818, 32136, 49912, 26735, 51353, 1532, 56571, 5290, 50757, 48599, 64561, 39635, 61025, 24715, 9950, 34846, 19677, 60660, 32590, 63473, 18811, 44678, 19428, 56545, 51158, 13031, 59895, 48492, 30050, 43866, 55625, 29743, 50755, 3940, 60818, 39619, 10369}) : toString(ViewConfiguration.getMaximumDrawingCacheSize() >> 24, new char[]{63285, 12507, 57146, 36998}, new char[]{0, 0, 0, 0}, (char) ((Process.myPid() >> 22) + 34527), new char[]{18558, 58517, 49069, 23503, 59545, 42756, 32350, 39515, 11342, 38012, 2350, 14021, 23778, 6412, 59164, 23217, 7710, 29126, 33811, 63965, 33905, 48628, 60260, 57924, 7296, 6652, 50628, 16126, 15614, 32048, 15614, 26405, 3854, 59053, 56815, 51475, 22210, 27002, 22715, 57187, 50756, 2476, 10977, 56734, 51104, 12036, 58076, 25687, 43813, 45342, 12107, 42362, 26827, 23929, 10624, 36592, 21035, 54866, 7992, 24697, 654, 2294, 2817, 42284, 18902, 25148, 57293, 65168, 7227, 11649, 45509, 61558, 25381, 6620, 35415, 25961, 50261, 20388, 57540, 51063, 11827, 21481, 38446, 60578, 54723, 29338, 31218, 12276, 58215, 23314, 6933, 14595, 51748, 32936, 11071, 47915, 37250, 53348, 38941, 57219, 28732, 15346, 29112, 34302, 21240, 42637, 43586, 26664, 13289, 38766, 13663, 64946, 47142, 33174, 33050, 24184, 1384, 40959, 20762, 36051, 51096, 45929, 10865, 17474, 34497, 3070, 9332, 20018, 60853, 2877, 51988, 20611, 18488, 15279, 1910, 52960, 10756, 61906, 43602, 58254, 40503, 8744, 43226, 61334, 40480, 4503, 17460, 17710, 44024, 38203, 41087, 30881, 18417, 28926, 43875, 59780, 51120, 56592, 1804, 48258, 35111, 17380, 45816, 46434, 10890, 22690, 6681, 27826, 27165, 38940, 15522, 16718, 23411, 18440, 5284, 52721, 31360, 49314, 20803, 55499, 35800, 52980, 32609, 44791, 12436, 2606, 10091, 65066, 65040, 34871, 52950, 23862, 15109, 51208, 22341, 20023, 53048, 28686, 26872, 9153, 42515, 37699, 47877, 21934, 39630, 47492, 28178, 43773, 1914, 20512, 39359, 34396, 47753, 13288, 1575, 62159, 59045, 8356, 7757, 24126, 19567, 24912, 13374, 55693, 1297, 788, 7583, 54791, 3181, 17018, 61435, 29780, 33219, 10094, 59876, 29357, 27790, 23444, 22294, 24881, 18118, 24099, 39144, 48473, 37761, 55649, 4618, 53695, 27870, 19828, 50584, 52037, 56172, 26647, 58221, 33144, 33257, 58348, 43793, 61447, 12034, 18631, 45177, 17092, 59551, 10371, 21638, 11310, 35737, 35790, 53738, 9232, 23832, 55742, 29476, 13755, 42319, 20919, 13794, 52616, 58778, 20956, 32241, 58455, 3642, 16133, 18430, 22383, 44148, 7621, 32149, 25576, 16207, 17894, 8557, 56676, 8797, 55574, 14402, 26939, 48248, 30797, 53923, 34007, 47175, 63896, 15035, 24212, 15718, 18416, 63622, 178, 30136, 53223, 37769, 9623, 58876, 11800, 19134, 345, 19561, 18321, 3307, 47714, 44322, 59883, 32201, 17260, 54034, 19529, 25114, 27861, 47396, 25954, 5482, 63845, 24363, 30255, 51891, 35441, 43245, 45619, 55717, 31096, 19070, 61766, 25869, 7104, 52004, 18859, 41825, 61619, 35743, 2734, 35012, 38818, 32136, 49912, 26735, 51353, 1532, 56571, 5290, 50757, 48599, 64561, 39635, 61025, 24715, 9950, 34846, 19677, 60660, 32590, 63473, 18811, 44678, 19428, 56545, 51158, 13031, 59895, 48492, 30050, 43866, 55625, 29743, 50755, 3940, 60818, 39619, 10369})).intern(), null, 1, null);
        int i2 = ah$b + 65;
        invoke = i2 % 128;
        int i3 = i2 % 2;
        return values2;
    }

    private static String toString(int i, char[] cArr, char[] cArr2, char c, char[] cArr3) {
        String str;
        synchronized (getShort.toString) {
            char[] cArr4 = (char[]) cArr.clone();
            char[] cArr5 = (char[]) cArr2.clone();
            cArr4[0] = (char) (c ^ cArr4[0]);
            cArr5[2] = (char) (cArr5[2] + ((char) i));
            int length = cArr3.length;
            char[] cArr6 = new char[length];
            getShort.valueOf = 0;
            while (getShort.valueOf < length) {
                int i2 = (getShort.valueOf + 2) % 4;
                int i3 = (getShort.valueOf + 3) % 4;
                getShort.values = (char) (((cArr4[getShort.valueOf % 4] * 32718) + cArr5[i2]) % 65535);
                cArr5[i3] = (char) (((cArr4[i3] * 32718) + cArr5[i2]) / 65535);
                cArr4[i3] = getShort.values;
                cArr6[getShort.valueOf] = (char) ((((cArr4[i3] ^ cArr3[getShort.valueOf]) ^ ag$a) ^ HaptikSDK$b) ^ HaptikSDK$c);
                getShort.valueOf++;
            }
            str = new String(cArr6);
        }
        return str;
    }
}
